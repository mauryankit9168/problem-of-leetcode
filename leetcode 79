class Solution {
public:
    bool isFind(vector<vector<char>>& board, int i, int j, string word, int k) {
        if (k == word.length())
            return true;         //base case 1
        if (i < 0 || j < 0 || i >= board.size() || j >= board[0].size())
            return false;        //base case 2
        if (board[i][j] != word[k])
            return false;        //base case 3

        char restoreVal = board[i][j];
        board[i][j] = '#';        //change after visited

        //dfs
        bool found = isFind(board, i - 1, j, word, k + 1) ||
                     isFind(board, i + 1, j, word, k + 1) ||
                     isFind(board, i, j - 1, word, k + 1) ||
                     isFind(board, i, j + 1, word, k + 1);

        board[i][j] = restoreVal;        //backtrack
        return found;
    }
    bool exist(vector<vector<char>>& board, string word) {
        int m = board.size();
        int n = board[0].size();
        if ((m * n) < word.length())
            return false;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (isFind(board, i, j, word, 0)) {      
                    return true;        //find first word
                }
            }
        }
        return false;
    }
};
