//without dynamic programming
class Solution {
public:
    void wordBreakHelper(string s,unordered_set<string>&mp,int i,string &str,vector<string>&result){
        if(i==s.length()){
            if(!str.empty() && str.back()==' ') str.pop_back();
            result.push_back(str);
            return;
        }
        for(int j=i+1;j<=s.length();j++){
            string temp=s.substr(i,j-i);
            if(mp.find(temp)!=mp.end()){
                int beforeAppend = str.size();
                str+=temp;
                str.push_back(' ');
                wordBreakHelper(s,mp,j,str,result);
                str.erase(beforeAppend);  //backtrack
            }
        }
        
    }
    vector<string> wordBreak(string s, vector<string>& wordDict) {
        unordered_set<string>mp(wordDict.begin(),wordDict.end());
        vector<string>result;
        string str="";
        wordBreakHelper(s,mp,0,str,result);
        return result;
    }
};
